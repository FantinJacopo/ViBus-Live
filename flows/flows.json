[
    {
        "id": "e660c6e1541baa8b",
        "type": "tab",
        "label": "ViBus Simulator",
        "disabled": false,
        "info": "Simulatore autobus SVT Vicenza"
    },
    {
        "id": "b401bf32f96173da",
        "type": "tab",
        "label": "MQTT to InfluxDB",
        "disabled": false,
        "info": "Pipeline dati da MQTT a InfluxDB"
    },
    {
        "id": "stats_tab",
        "type": "tab",
        "label": "ViBus Statistics Real-Time",
        "disabled": false,
        "info": "Calcolo statistiche in tempo reale da dati autobus"
    },
    {
        "id": "be5f05d2fd92c741",
        "type": "mqtt-broker",
        "name": "Mosquitto Local",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "nodered_influx",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "8c7fb5d91e2b2a07",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "bus-data",
        "name": "ViBus InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "34ab577dae58df02",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "bus-data",
        "name": "ViBus InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "789ecc1711f82829",
        "type": "mqtt-broker",
        "name": "Mosquitto Local",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "nodered_influx",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "41c4ec71fea51565",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "bus-data",
        "name": "ViBus InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "rejectUnauthorized": true
    },
    {
        "id": "mqtt_broker",
        "type": "mqtt-broker",
        "name": "Mosquitto Local",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "nodered_simulator",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "vibus/sistema/nodered/stato",
        "birthQos": "1",
        "birthRetain": "true",
        "birthPayload": "online",
        "birthMsg": {},
        "closeTopic": "vibus/sistema/nodered/stato",
        "closeQos": "1",
        "closeRetain": "true",
        "closePayload": "offline",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "mqtt_broker_influx",
        "type": "mqtt-broker",
        "name": "Mosquitto Local",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "nodered_influx",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "influxdb_config",
        "type": "influxdb",
        "hostname": "influxdb",
        "port": "8086",
        "protocol": "http",
        "database": "bus-data",
        "name": "ViBus InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://influxdb:8086",
        "timeout": "",
        "rejectUnauthorized": true
    },
    {
        "id": "mqtt_broker_stats",
        "type": "mqtt-broker",
        "name": "Mosquitto Stats",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "nodered_stats",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "vibus/sistema/nodered/stato",
        "birthQos": "1",
        "birthRetain": "true",
        "birthPayload": "stats_online",
        "birthMsg": {},
        "closeTopic": "vibus/sistema/nodered/stato",
        "closeQos": "1",
        "closeRetain": "true",
        "closePayload": "stats_offline",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "098860802d519e98",
        "type": "inject",
        "z": "e660c6e1541baa8b",
        "name": "Avvia Simulazione",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "48108a0ede779c4a"
            ]
        ]
    },
    {
        "id": "48108a0ede779c4a",
        "type": "function",
        "z": "e660c6e1541baa8b",
        "name": "Simula Autobus SVT",
        "func": "// 1. MODIFICA IL SIMULATORE AUTOBUS (flow esistente)\n// Nel nodo \"Simula Autobus SVT\", sostituisci le righe con flow.get/set con global.get/set\n\nconst lines = [{id: \"1\", name: \"Stanga-Ospedale\", color: \"#FF6B35\"}, {id: \"2\", name: \"Anconetta-Ferrovieri\", color: \"#004E89\"}, {id: \"3\", name: \"Maddalene-Cattane\", color: \"#00A8CC\"}, {id: \"5\", name: \"Villaggio-Centro\", color: \"#7209B7\"}, {id: \"7\", name: \"Laghetto-Stadio\", color: \"#FF8500\"}]; \n\nconst vicenzaCenter = { lat: 45.5477, lon: 11.5458 }; \n\n// CAMBIA: da flow.get(\"buses\") a global.get(\"buses\")\nif (!global.get(\"buses\")) { \n    const buses = []; \n    lines.forEach(line => { \n        for (let i = 1; i <= 2; i++) { \n            buses.push({ \n                id: `SVT${line.id}${String(i).padStart(2, '0')}`, \n                line: line.id, \n                lineName: line.name, \n                lat: vicenzaCenter.lat + (Math.random() - 0.5) * 0.02, \n                lon: vicenzaCenter.lon + (Math.random() - 0.5) * 0.02, \n                speed: 25 + Math.random() * 15, \n                bearing: Math.random() * 360, \n                delay: Math.floor(Math.random() * 8) - 2, \n                passengers: Math.floor(Math.random() * 40), \n                status: \"in_service\", \n                lastUpdate: new Date() \n            }); \n        } \n    }); \n    // CAMBIA: da flow.set(\"buses\", buses) a global.set(\"buses\", buses)\n    global.set(\"buses\", buses); \n} \n\n// CAMBIA: da flow.get(\"buses\") a global.get(\"buses\")\nconst buses = global.get(\"buses\"); \n\nconst updatedBuses = buses.map(bus => { \n    const moveDistance = 0.0005; \n    const bearing = bus.bearing + (Math.random() - 0.5) * 30; \n    const newLat = bus.lat + moveDistance * Math.cos(bearing * Math.PI / 180); \n    const newLon = bus.lon + moveDistance * Math.sin(bearing * Math.PI / 180); \n    const lat = Math.max(45.52, Math.min(45.57, newLat)); \n    const lon = Math.max(11.52, Math.min(11.57, newLon)); \n    return { \n        ...bus, \n        lat: lat, \n        lon: lon, \n        bearing: bearing, \n        speed: Math.max(5, Math.min(50, bus.speed + (Math.random() - 0.5) * 5)), \n        delay: bus.delay + (Math.random() - 0.5) * 0.5, \n        passengers: Math.max(0, Math.min(50, bus.passengers + Math.floor((Math.random() - 0.5) * 6))), \n        lastUpdate: new Date() \n    }; \n}); \n\n// CAMBIA: da flow.set(\"buses\", updatedBuses) a global.set(\"buses\", updatedBuses)\nglobal.set(\"buses\", updatedBuses); \n\nconst messages = []; \nupdatedBuses.forEach(bus => { \n    messages.push({ \n        payload: JSON.stringify({ \n            bus_id: bus.id, \n            line: bus.line, \n            line_name: bus.lineName, \n            position: { \n                lat: bus.lat, \n                lon: bus.lon \n            }, \n            speed: Math.round(bus.speed * 10) / 10, \n            bearing: Math.round(bus.bearing), \n            delay: Math.round(bus.delay * 10) / 10, \n            passengers: bus.passengers, \n            status: bus.status, \n            timestamp: bus.lastUpdate.toISOString() \n        }), \n        topic: `vibus/autobus/${bus.id}/posizione` \n    }); \n}); \n\nreturn [messages];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 180,
        "wires": [
            [
                "029abb3813f214ab"
            ]
        ]
    },
    {
        "id": "029abb3813f214ab",
        "type": "split",
        "z": "e660c6e1541baa8b",
        "name": "Split Autobus",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "property": "payload",
        "x": 550,
        "y": 180,
        "wires": [
            [
                "b0d7992e3854de76"
            ]
        ]
    },
    {
        "id": "b0d7992e3854de76",
        "type": "function",
        "z": "e660c6e1541baa8b",
        "name": "Formatta JSON",
        "func": "if (typeof msg.payload === 'object') {\n    // È già un oggetto, lascialo così\n    return msg;\n} else if (typeof msg.payload === 'string') {\n    // È una stringa, prova a parsarla\n    try {\n        msg.payload = JSON.parse(msg.payload);\n        return msg;\n    } catch (e) {\n        // Se non è JSON valido, lascia la stringa\n        return msg;\n    }\n} else {\n    // Per altri tipi, converti in stringa se necessario\n    msg.payload = String(msg.payload);\n    return msg;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 180,
        "wires": [
            [
                "607c8cbfeec821ea",
                "e8d09695a4d4a2f0"
            ]
        ]
    },
    {
        "id": "607c8cbfeec821ea",
        "type": "mqtt out",
        "z": "e660c6e1541baa8b",
        "name": "Pubblica MQTT",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt_broker",
        "x": 950,
        "y": 80,
        "wires": []
    },
    {
        "id": "e8d09695a4d4a2f0",
        "type": "debug",
        "z": "e660c6e1541baa8b",
        "name": "Debug Autobus",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 940,
        "y": 240,
        "wires": []
    },
    {
        "id": "25a02ee265408414",
        "type": "mqtt in",
        "z": "b401bf32f96173da",
        "name": "Ricevi Dati Autobus",
        "topic": "vibus/autobus/+/posizione",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "mqtt_broker_influx",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 100,
        "wires": [
            [
                "8d3c6b9201078891"
            ]
        ]
    },
    {
        "id": "8d3c6b9201078891",
        "type": "function",
        "z": "b401bf32f96173da",
        "name": "Parse JSON",
        "func": "try { if (typeof msg.payload === 'string') { msg.payload = JSON.parse(msg.payload); } return msg; } catch (e) { node.error('Errore parsing JSON: ' + e.message, msg); return null; }",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 100,
        "wires": [
            [
                "6009ba6b92f1d7fb"
            ]
        ]
    },
    {
        "id": "6009ba6b92f1d7fb",
        "type": "function",
        "z": "b401bf32f96173da",
        "name": "Processa Dati Autobus",
        "func": "try { \n    const data = msg.payload; \n    \n    if (!data || !data.position) { \n        node.error('Dati mancanti nel payload', msg); \n        return null; \n    } \n    \n    // Timestamp in nanoseconds\n    const timestamp = Math.floor(Date.now() * 1000000);\n    \n    // Line Protocol corretto per InfluxDB\n    const lineProtocol = `bus_positions,bus_id=${data.bus_id},line=${data.line},status=${data.status} latitude=${data.position.lat},longitude=${data.position.lon},speed=${data.speed},bearing=${data.bearing},delay=${data.delay},passengers=${data.passengers}i ${timestamp}`;\n    \n    msg.payload = lineProtocol;\n    msg.headers = {\n        'Authorization': 'Token svt-super-secret-token-123456789',\n        'Content-Type': 'text/plain; charset=utf-8'\n    };\n    \n    return msg; \n} catch (e) { \n    node.error('Errore processing: ' + e.message, msg); \n    return null; \n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 100,
        "wires": [
            [
                "74c6c2eb2f43e7c3"
            ]
        ]
    },
    {
        "id": "c7d2b8e2013f2e98",
        "type": "inject",
        "z": "b401bf32f96173da",
        "name": "Genera Statistiche",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "131351fc44c6a4be"
            ]
        ]
    },
    {
        "id": "131351fc44c6a4be",
        "type": "function",
        "z": "b401bf32f96173da",
        "name": "Calcola Statistiche Linea",
        "func": "const lines = [\"1\", \"2\", \"3\", \"5\", \"7\"]; const now = new Date(); const timestamp = now.getTime() * 1000000; const stats = lines.map(line => { const avgDelay = (Math.random() - 0.3) * 5; const maxDelay = avgDelay + Math.random() * 10; const onTimePercentage = Math.max(60, 100 - Math.abs(avgDelay) * 15); const activeBuses = Math.floor(Math.random() * 3) + 1; return { measurement: 'line_stats', tags: { line: line, day_type: now.getDay() === 0 || now.getDay() === 6 ? 'weekend' : 'weekday' }, fields: { avg_delay: Math.round(avgDelay * 10) / 10, max_delay: Math.round(maxDelay * 10) / 10, on_time_percentage: Math.round(onTimePercentage * 10) / 10, active_buses: activeBuses }, timestamp: timestamp }; }); return stats.map(stat => ({ payload: stat, topic: `vibus/linea/${stat.tags.line}/statistiche`, statData: stat }));",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 200,
        "wires": [
            [
                "9b0f43866de1f93d"
            ]
        ]
    },
    {
        "id": "9b0f43866de1f93d",
        "type": "split",
        "z": "b401bf32f96173da",
        "name": "Split Statistiche",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 650,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "74c6c2eb2f43e7c3",
        "type": "http request",
        "z": "b401bf32f96173da",
        "name": "InfluxDB HTTP",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://influxdb:8086/api/v2/write?org=SVT-Vicenza&bucket=bus-data&precision=ns",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 780,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "inject_stats_timer",
        "type": "inject",
        "z": "stats_tab",
        "name": "Timer Statistiche (10s)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "calc_line_stats",
                "calc_system_stats"
            ]
        ]
    },
    {
        "id": "calc_line_stats",
        "type": "function",
        "z": "stats_tab",
        "name": "Calcola Statistiche Linee",
        "func": "// 2. MODIFICA IL CALCOLO STATISTICHE LINEE\n// Nel nodo \"Calcola Statistiche Linee\", usa global.get invece di flow.get\n\nconst lines = [\"1\", \"2\", \"3\", \"5\", \"7\"];\nconst now = new Date();\n\n// CAMBIA: da flow.get(\"buses\") a global.get(\"buses\")\nconst allBuses = global.get(\"buses\") || [];\n\nnode.log(`=== CALCOLO STATISTICHE LINEE ===`);\nnode.log(`Autobus trovati in global context: ${allBuses.length}`);\n\nif (allBuses.length === 0) {\n    node.warn(\"Nessun dato autobus disponibile per calcolare statistiche\");\n    node.log(\"Verifica che il simulatore autobus sia attivo e stia usando global.set('buses', ...)\");\n    return null;\n}\n\nconst statistiche = [];\n\nlines.forEach(lineId => {\n    // Filtra autobus per questa linea\n    const busesLinea = allBuses.filter(bus => bus.line === lineId);\n    \n    node.log(`Linea ${lineId}: trovati ${busesLinea.length} autobus`);\n    \n    if (busesLinea.length > 0) {\n        // Calcola statistiche reali\n        const velocitaMedia = busesLinea.reduce((sum, bus) => sum + bus.speed, 0) / busesLinea.length;\n        const ritardoMedio = busesLinea.reduce((sum, bus) => sum + bus.delay, 0) / busesLinea.length;\n        const ritardoMassimo = Math.max(...busesLinea.map(bus => bus.delay));\n        const passeggeriTotali = busesLinea.reduce((sum, bus) => sum + bus.passengers, 0);\n        \n        // Calcola percentuale puntualità (ritardo <= 2 minuti)\n        const autobusInOrario = busesLinea.filter(bus => bus.delay <= 2).length;\n        const percentualePuntualita = (autobusInOrario / busesLinea.length) * 100;\n        \n        const stats = {\n            line: lineId,\n            line_name: getLineName(lineId),\n            active_buses: busesLinea.length,\n            average_speed: Math.round(velocitaMedia * 10) / 10,\n            average_delay: Math.round(ritardoMedio * 10) / 10,\n            max_delay: Math.round(ritardoMassimo * 10) / 10,\n            on_time_percentage: Math.round(percentualePuntualita * 10) / 10,\n            total_passengers: passeggeriTotali,\n            day_type: now.getDay() === 0 || now.getDay() === 6 ? 'weekend' : 'weekday',\n            timestamp: now.toISOString()\n        };\n        \n        statistiche.push({\n            topic: `vibus/linea/${lineId}/statistiche`,\n            payload: JSON.stringify(stats),\n            retain: false\n        });\n        \n        node.log(`✅ Statistiche Linea ${lineId}: ${busesLinea.length} autobus, velocità media ${velocitaMedia.toFixed(1)}km/h, ritardo medio ${ritardoMedio.toFixed(1)}min, puntualità ${percentualePuntualita.toFixed(1)}%`);\n    } else {\n        node.warn(`❌ Nessun autobus trovato per linea ${lineId}`);\n    }\n});\n\n// Funzione helper per nomi linee\nfunction getLineName(lineId) {\n    const nomi = {\n        \"1\": \"Stanga-Ospedale\",\n        \"2\": \"Anconetta-Ferrovieri\", \n        \"3\": \"Maddalene-Cattane\",\n        \"5\": \"Villaggio-Centro\",\n        \"7\": \"Laghetto-Stadio\"\n    };\n    return nomi[lineId] || `Linea ${lineId}`;\n}\n\nnode.log(`=== RISULTATO: Calcolate statistiche per ${statistiche.length} linee ===`);\nreturn [statistiche];",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 80,
        "wires": [
            [
                "split_line_stats"
            ]
        ]
    },
    {
        "id": "calc_system_stats",
        "type": "function",
        "z": "stats_tab",
        "name": "Calcola Statistiche Sistema",
        "func": "// 3. MODIFICA IL CALCOLO STATISTICHE SISTEMA\n// Nel nodo \"Calcola Statistiche Sistema\", usa global.get invece di flow.get\n\nconst now = new Date();\n\n// CAMBIA: da flow.get(\"buses\") a global.get(\"buses\")\nconst allBuses = global.get(\"buses\") || [];\n\nnode.log(`=== CALCOLO STATISTICHE SISTEMA ===`);\nnode.log(`Autobus trovati in global context: ${allBuses.length}`);\n\nif (allBuses.length === 0) {\n    node.warn(\"Nessun dato autobus per statistiche sistema\");\n    node.log(\"Verifica che il simulatore autobus sia attivo e stia usando global.set('buses', ...)\");\n    return null;\n}\n\n// Calcola metriche sistema\nconst totalBuses = 10; // Numero totale autobus SVT (configurabile)\nconst activeBuses = allBuses.length;\nconst totalPassengers = allBuses.reduce((sum, bus) => sum + bus.passengers, 0);\nconst averageSystemDelay = allBuses.reduce((sum, bus) => sum + bus.delay, 0) / allBuses.length;\n\n// Calcola salute del sistema basata su ritardo medio\nlet systemHealth;\nif (averageSystemDelay <= 1.0) {\n    systemHealth = \"EXCELLENT\";\n} else if (averageSystemDelay <= 2.0) {\n    systemHealth = \"GOOD\";\n} else if (averageSystemDelay <= 3.0) {\n    systemHealth = \"FAIR\";\n} else if (averageSystemDelay <= 5.0) {\n    systemHealth = \"POOR\";\n} else {\n    systemHealth = \"CRITICAL\";\n}\n\n// Calcola velocità media sistema\nconst averageSpeed = allBuses.reduce((sum, bus) => sum + bus.speed, 0) / allBuses.length;\n\n// Statistiche per linea (conteggio autobus)\nconst lineDistribution = {};\nallBuses.forEach(bus => {\n    lineDistribution[bus.line] = (lineDistribution[bus.line] || 0) + 1;\n});\n\n// Calcola percentuale autobus puntuali nel sistema\nconst autobusInOrario = allBuses.filter(bus => bus.delay <= 2).length;\nconst systemOnTimePercentage = (autobusInOrario / allBuses.length) * 100;\n\nconst systemStats = {\n    total_buses: totalBuses,\n    active_buses: activeBuses,\n    total_passengers: totalPassengers,\n    average_system_delay: Math.round(averageSystemDelay * 10) / 10,\n    average_system_speed: Math.round(averageSpeed * 10) / 10,\n    system_health: systemHealth,\n    system_on_time_percentage: Math.round(systemOnTimePercentage * 10) / 10,\n    line_distribution: lineDistribution,\n    uptime_percentage: 95.0 + (Math.random() * 4), // Simula uptime sistema\n    timestamp: now.toISOString()\n};\n\nreturn {\n    topic: \"vibus/sistema/generale/stato\",\n    payload: JSON.stringify(systemStats),\n    retain: true // Mantieni ultimo stato sistema\n};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 180,
        "wires": [
            [
                "mqtt_system_stats",
                "debug_system_stats"
            ]
        ]
    },
    {
        "id": "split_line_stats",
        "type": "split",
        "z": "stats_tab",
        "name": "Split per Linea",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 610,
        "y": 80,
        "wires": [
            [
                "mqtt_line_stats",
                "debug_line_stats"
            ]
        ]
    },
    {
        "id": "mqtt_line_stats",
        "type": "mqtt out",
        "z": "stats_tab",
        "name": "Pubblica MQTT Linee",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt_broker_stats",
        "x": 960,
        "y": 100,
        "wires": []
    },
    {
        "id": "mqtt_system_stats",
        "type": "mqtt out",
        "z": "stats_tab",
        "name": "Pubblica MQTT Sistema",
        "topic": "",
        "qos": "1",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt_broker_stats",
        "x": 730,
        "y": 160,
        "wires": []
    },
    {
        "id": "debug_line_stats",
        "type": "debug",
        "z": "stats_tab",
        "name": "Debug Statistiche Linee",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 40,
        "wires": []
    },
    {
        "id": "debug_system_stats",
        "type": "debug",
        "z": "stats_tab",
        "name": "Debug Statistiche Sistema",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 260,
        "wires": []
    }
]